"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},59881:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const o={},i="Intro",l={unversionedId:"intro",id:"intro",title:"Intro",description:"LuauSignal aims to be a strictly-typed Luau implementation of a signal. It does not aim to be 1:1 to RBXScriptSignal, because there's multiple needless features that don't need to be there (for example, an entire class for connections.)",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/LuauSignal/docs/intro",draft:!1,editUrl:"https://github.com/ffrostflame/luausignal/edit/master/docs/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar"},s={},u=[{value:"Why use this over GoodSignal?",id:"why-use-this-over-goodsignal",level:2},{value:"Drawbacks",id:"drawbacks",level:2},{value:"Luau Types",id:"luau-types",level:2},{value:"Incorrect number of arguments to .new()",id:"incorrect-number-of-arguments-to-new",level:3}],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intro"},"Intro"),(0,a.kt)("p",null,"LuauSignal aims to be a strictly-typed Luau implementation of a signal. It does not aim to be 1:1 to ",(0,a.kt)("inlineCode",{parentName:"p"},"RBXScriptSignal"),", because there's multiple needless features that don't need to be there (for example, an entire class for connections.)"),(0,a.kt)("h2",{id:"why-use-this-over-goodsignal"},"Why use this over GoodSignal?"),(0,a.kt)("p",null,"GoodSignal was not written in strict Luau, which means that it has several type errors. Alongside this, GoodSignal aims to replicate ",(0,a.kt)("inlineCode",{parentName:"p"},"RBXScriptSignal")," almost perfectly. This, however, is limiting. It means more memory usage overall, and it means an entire class just for connections. In LuauSignal, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Connect")," method returns a function. Calling this function disconnects the connection."),(0,a.kt)("h2",{id:"drawbacks"},"Drawbacks"),(0,a.kt)("p",null,"The drawbacks of using LuauSignal over the alternative, GoodSignal, are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Connections are not fired in order of when they were connected"),(0,a.kt)("li",{parentName:"ul"},"You cannot connect the exact same callback more than once")),(0,a.kt)("h2",{id:"luau-types"},"Luau Types"),(0,a.kt)("p",null,"The main benefit of using LuauSignal over GoodSignal is that you can type your signals using generic types."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--!strict\nlocal signal = LuauSignal.new()\n\nsignal:Connect(function()\n    print("I don\'t do anything!")\nend)\n\nsignal:Fire(5, 4, 3) -- This will lint, saying there are more arguments than expected.\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--!strict\nlocal signal: LuauSignal.Signal<string> = LuauSignal.new()\n\nsignal:Connect(function(text) -- This is typechecked as a string\n    print(text)\nend)\n\nsignal:Fire("some random text") -- This doesn\'t lint!\n')),(0,a.kt)("h3",{id:"incorrect-number-of-arguments-to-new"},"Incorrect number of arguments to .new()"),(0,a.kt)("p",null,'If your linter says "incorrect number of arguments to .new()", you can solve it by simply putting "..." in the ',(0,a.kt)("inlineCode",{parentName:"p"},".new()")," function like so:\n",(0,a.kt)("inlineCode",{parentName:"p"},"local signal: LuauSignal.Signal<string> = LuauSignal.new(...)")))}d.isMDXComponent=!0}}]);