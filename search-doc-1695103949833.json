[{"title":"Intro","type":0,"sectionRef":"#","url":"/LuauSignal/docs/intro","content":"","keywords":""},{"title":"Why use this over GoodSignal?​","type":1,"pageTitle":"Intro","url":"/LuauSignal/docs/intro#why-use-this-over-goodsignal","content":"GoodSignal was not written in strict Luau, which means that it has several type errors. Alongside this, GoodSignal aims to replicate RBXScriptSignal almost perfectly. This, however, is limiting. It means more memory usage overall, and it means an entire class just for connections. In LuauSignal, the Connect method returns a function. Calling this function disconnects the connection. "},{"title":"Drawbacks​","type":1,"pageTitle":"Intro","url":"/LuauSignal/docs/intro#drawbacks","content":"The drawbacks of using LuauSignal over the alternative, GoodSignal, are: Connections are not fired in order of when they were connectedYou cannot connect the exact same callback more than once "},{"title":"Luau Types​","type":1,"pageTitle":"Intro","url":"/LuauSignal/docs/intro#luau-types","content":"The main benefit of using LuauSignal over GoodSignal is that you can type your signals using generic types. --!strict local signal = LuauSignal.new() signal:Connect(function() print(&quot;I don't do anything!&quot;) end) signal:Fire(5, 4, 3) -- This will lint, saying there are more arguments than expected.  --!strict local signal: LuauSignal.Signal&lt;string&gt; = LuauSignal.new() signal:Connect(function(text) -- This is typechecked as a string print(text) end) signal:Fire(&quot;some random text&quot;) -- This doesn't lint!  "},{"title":"Incorrect number of arguments to .new()​","type":1,"pageTitle":"Intro","url":"/LuauSignal/docs/intro#incorrect-number-of-arguments-to-new","content":"If your linter says &quot;incorrect number of arguments to .new()&quot;, you can solve it by simply putting &quot;...&quot; in the .new() function like so:local signal: LuauSignal.Signal&lt;string&gt; = LuauSignal.new(...) "},{"title":"Signal","type":0,"sectionRef":"#","url":"/LuauSignal/api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/LuauSignal/api/Signal#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"Signal","url":"/LuauSignal/api/Signal#Connect","content":"&lt;/&gt; Signal:Connect(callback: function) → function Connects a given function to the signal local signal = LuauSignal.new() local connection = signal:Connect(function() print(&quot;hi!&quot;) end) signal:Fire() connection() -- Call the connection to clean it up, to prevent memory leaks   "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"/LuauSignal/api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(arguments: ...) → () Fires a signal, calling all of the connected callbacks. local signal = LuauSignal.new() connection = signal:Connect(function(...) print(...) end) signal:Fire(&quot;wow&quot;, 3, false) -- will print &quot;wow&quot;, 3, false   "},{"title":"Once​","type":1,"pageTitle":"Signal","url":"/LuauSignal/api/Signal#Once","content":"&lt;/&gt; Signal:Once(callback: function) → function Connects to a signal and runs only once. local signal = LuauSignal.new() signal:Once(function() print(&quot;This will only print once&quot;) end) signal:Fire() signal:Fire()   "},{"title":"Wait​","type":1,"pageTitle":"Signal","url":"/LuauSignal/api/Signal#Wait","content":"&lt;/&gt; Signal:Wait() → ... Yields until the signal is fired. Returns all arguments in the form of a vararg local signal = LuauSignal.new() task.delay(1, function() signal:Fire(&quot;exactly one second!&quot;) end) local text = signal:Wait() print(&quot;this was &quot; .. text) -- prints &quot;this was exactly one second!&quot;   "},{"title":"DisconnectAll​","type":1,"pageTitle":"Signal","url":"/LuauSignal/api/Signal#DisconnectAll","content":"&lt;/&gt; Signal:DisconnectAll() → () Disconnects all active connections from a signal local signal = LuauSignal.new() connection = signal:Connect(function() print(&quot;This will never run!&quot;) end) signal:DisconnectAll() signal:Fire()  "}]